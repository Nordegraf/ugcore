variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_DIR/$CI_PIPELINE_ID/$CI_JOB_ID/

stages:
  - build
  - test
  - deploy

# common subscripts:
.repo2ugcore: &repo2ugcore
  - ls -all
  - cd ..
  - mv "$CI_JOB_ID" tmp
  - mkdir "$CI_JOB_ID"
  - mv tmp "$CI_JOB_ID"/ugcore
  - cd "$CI_JOB_ID"

.setup_ug: &setup_ug
  - if cd ughub; then git pull&&cd ..; else git clone https://github.com/UG4/ughub ughub; fi
  - export PATH=$PATH:$(pwd)/ughub
  - mkdir -p ug4
  - cd ug4
  - ls -a
  - ughub init
  - ughub addsource quadruped gitolite3@quadruped.gcsc.uni-frankfurt.de:ug4-packages
  - ughub updatesources
  - ughub install $UG_PACKAGES_TO_INSTALL
  - ughub git submodule init # todo needed?
  - ughub git submodule update # todo needed?
  - rm -rf ugcore/
  - mv ../ugcore ugcore  # todo do a submodule update in cloned repo?
  - source ugcore/scripts/shell/ugbash
  - cd ..

.build_ug: &build_ug
    - cd ug4
    - mkdir -p build
    - cd build
    - cmake .. -DENABLE_ALL_PLUGINS=ON -GNinja
    - ninja -j4
    - cd ../..

.build_test: &build_test
    - cd ug4/apps/unit_tests
    - mkdir -p build
    - cd build
    #- export LD_FLAGS="-lboost_system -lboost_filesystem -lboost_serialization -lug4"
    - cmake .. -DUSE_JSON=OFF -DINTERNAL_BOOST=ON -DDEBUG=OFF -GNinja
    - ninja -j4
    - cd ../../../..

.run_tests: &run_tests
    - mkdir -p test_reports
    - mkdir -p coverage_reports
    - pwd
    - ls
    - echo $UG4_ROOT
    - ./ug4/bin/testsuite --build-info=yes --log_level=all --log_format=XML -- --name report
    - mv ug_test_numprocs_1.log report.xml
    #- gcovr -v --gcov-executable "llvm-cov gcov" --xml -o "coveragereport_${CI_COMMIT_SHORT_SHA}.xml" -r $CI_PROJECT_DIR $CI_PROJECT_DIR/ug4/build/
    #- mv coveragereport_${CI_COMMIT_SHORT_SHA}.xml coverage_reports/${CI_COMMIT_SHORT_SHA}.xml
    - cd ..

# BUILD sources on various platforms and compilers
build-clang:
  stage: build
  variables:
    CC: "ccache clang"
    CXX: "ccache clang++"
    UG_PACKAGES_TO_INSTALL: "ConvectionDiffusion"
  tags:
    - linux
  timeout: 4 hours
  script:
    - *repo2ugcore # moves caches into ugcore folder
    - *setup_ug
    - *build_ug
  artifacts:
    when: on_success
    expire_in: 1 week
    paths:
      - ug4/bin
  #cache:
  #  policy: pull-push
  # unprotect: false
  # untracked: false
  # when: on_success
  # paths:
  #   - "ug4/build"
  #   - "ughub"

# TEST ug4
do-test:
  stage: test
  variables:
    CC: "ccache clang"
    CXX: "ccache clang++"
    #CXX_FLAGS: "-O0 -coverage -fPIC"
    UG_PACKAGES_TO_INSTALL: "ugcore tests unit_tests"
    #UG_PACKAGES_TO_INSTALL: "ugcore d3f_app tests unit_tests"
    #UG_PACKAGES_TO_INSTALL: "ugcore adaptive_mg_tests conv_diff_app d3f_app tests electromagnetism_app unit_tests"
  tags:
    - linux
  timeout: 4 hours
  script:
    - *repo2ugcore # moves caches into ugcore folder
    - *setup_ug
    - *build_ug
    - *build_test
    - *run_tests
  artifacts:
    when: always
    expire_in: 4 week
    paths:
      - report.xml
    reports:
      junit: report.xml
      #coverage_report:
      #  coverage_format: cobertura
      #  path: coverage_reports/${CI_COMMIT_SHORT_SHA}.xml
  #cache:
  #  policy: pull-push
  #  unprotect: false
  #  untracked: false
  #  when: on_success
  #  paths:
  #    - "ug4/build"
  #    - "ug4/apps/unit_tests/build"
  #    - "ughub"
        
# DEPLOY upload changes to repo and upload packages?
deploy-job:      # TODO
  variables:
    GIT_STRATEGY: none # Do not clone repo again for this job.
  stage: deploy
  environment: production
  script:
    - echo "Get release artifact and deploy it"
default:
  tags:
    - docker

variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_DIR/$CI_PIPELINE_ID/ug4/ugcore
    #UG_PACKAGES_TO_INSTALL: "ugcore adaptive_mg_tests conv_diff_app d3f_app tests electromagnetism_app unit_tests"

stages:
  - build
  - test
  - deploy

# BUILD sources on various platforms and compilers
build-clang:
  stage: build
  image: rigby132/ug4-minimal:latest
  timeout: 4 hours
  variables:
    CMAKE_C_COMPILER: "gcc"
    CMAKE_CXX_COMPILER: "g++"
    CXX_FLAGS: "-O3 -fPIC"
  script:
    # copy ug4 without overwriting existing files (ugcore)
    - cd ..
    - cp --update=none -R /opt/ug4/. .
    # build ug
    - mkdir -p build
    - cd build
    - cmake .. -DENABLE_ALL_PLUGINS=ON -DDEBUG=OFF -GNinja
    - ninja -j8
    - cd ..
    # move artifacts to clone dir
    - ls -a bin
    - mv bin ugcore/bin
  artifacts:
    when: on_success
    expire_in: 1 week
    paths:
      - bin/*
      - bin/plugins/*
  #cache:
  #  policy: pull-push
  # unprotect: false
  # untracked: false
  # when: on_success
  # paths:
  #   - "ug4/build"
  #   - "ughub"

# TEST ug4
do-test:
  stage: test
  image: rigby132/ug4-test:latest
  timeout: 4 hours
  variables:
    CMAKE_C_COMPILER: "gcc"
    CMAKE_CXX_COMPILER: "g++"
    #CXX_FLAGS: "-O0 -coverage -fPIC"
  script:
    # copy ug4 without overwriting existing files (ugcore)
    - cd ..
    - cp --update=none -R /opt/ug4/. .
    # build ug in debug
    - mkdir -p build
    - cd build
    - cmake .. -DENABLE_ALL_PLUGINS=ON -DDEBUG=ON -GNinja
    - ninja -j8
    - cd ..
    # build testsuite
    - cd apps/unit_tests/
    - mkdir -p build
    - cd build
    - cmake .. -DUSE_JSON=OFF -DINTERNAL_BOOST=ON -DDEBUG=ON -GNinja
    - ninja -j8
    - cd ../../..
    - pwd
    - ls -a
    - source ugcore/scripts/shell/ugbash
    - echo $UG4_ROOT
    - ./bin/testsuite --build-info=yes --log_level=all --log_format=XML -- --name report
    - mv ug_test_numprocs_1.log ugcore/report.xml
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - report.xml
    reports:
      junit: report.xml
      #coverage_report:
      #  coverage_format: cobertura
      #  path: coverage_reports/${CI_COMMIT_SHORT_SHA}.xml
  #cache:
  #  policy: pull-push
  #  unprotect: false
  #  untracked: false
  #  when: on_success
  #  paths:
  #    - "ug4/build"
  #    - "ug4/apps/unit_tests/build"
  #    - "ughub"
        
# DEPLOY upload changes to repo and upload packages?
deploy-job:      # TODO
  variables:
    GIT_STRATEGY: none # Do not clone repo again for this job.
  stage: deploy
  environment: production
  script:
    - echo "Get release artifact and deploy it"
default:
  image: rigby132/ug4-minimal:latest
  tags:
    - gitlab-org-docker

variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_DIR/$CI_PIPELINE_ID/ugcore

stages:
  - build
  - test
  - deploy

# BUILD sources on various platforms and compilers
build-clang:
  stage: build
  variables:
    CMAKE_C_COMPILER: "gcc"
    CMAKE_CXX_COMPILER: "g++"
    CXX_FLAGS: "-O0 -coverage -fPIC"
    #UG_PACKAGES_TO_INSTALL: "ConvectionDiffusion ugcore tests unit_tests"
    #UG_PACKAGES_TO_INSTALL: "ugcore d3f_app tests unit_tests"
    #UG_PACKAGES_TO_INSTALL: "ugcore adaptive_mg_tests conv_diff_app d3f_app tests electromagnetism_app unit_tests"

  timeout: 4 hours
  script:
    # move to CI "workspace" and install ug
    - cd ..
    - mkdir -p ug4
    - cp -R /opt/ug4/. ug4
    - pwd
    - ls -a
    #- git clone https://github.com/UG4/ughub
    #- export PATH=$PATH:$(pwd)/ughub
    #- cd ug4
    #- ughub init
    #- ughub addsource quadruped gitolite3@quadruped.gcsc.uni-frankfurt.de:ug4-packages
    #- ughub updatesources
    #- ughub install $UG_PACKAGES_TO_INSTALL
    #- ughub git submodule init
    #- ughub git submodule update
    # replace ugcore
    #- ls -a
    - rm -r ug4/ugcore
    - mv ugcore ug4/ugcore
    # build ug
    - mkdir -p build
    - cd build
    - cmake .. -DENABLE_ALL_PLUGINS=ON -DDEBUG=ON -GNinja
    - ninja -j8
    # build testsuite
    #- cd ../apps/unit_tests/
    #- mkdir -p build
    #- cd build
    #- cmake .. -DUSE_JSON=OFF -DINTERNAL_BOOST=ON -DDEBUG=ON -GNinja
    #- ninja -j8
  artifacts:
    when: on_success
    expire_in: 1 week
    paths:
      - ug4/bin
  #cache:
  #  policy: pull-push
  # unprotect: false
  # untracked: false
  # when: on_success
  # paths:
  #   - "ug4/build"
  #   - "ughub"

# TEST ug4
do-test:
  stage: test
  variables:
    GIT_STRATEGY: none # Do not clone repo again for this job.
  tags:
    - linux
  timeout: 4 hours
  script:
    - pwd
    - ls -a
    - source scripts/shell/ugbash
    - cd ../
    - echo $UG4_ROOT
    - ./ug4/bin/testsuite --build-info=yes --log_level=all --log_format=XML -- --name report
    - mv ug_test_numprocs_1.log report.xml
  artifacts:
    when: always
    expire_in: 4 week
    paths:
      - report.xml
    reports:
      junit: report.xml
      #coverage_report:
      #  coverage_format: cobertura
      #  path: coverage_reports/${CI_COMMIT_SHORT_SHA}.xml
  #cache:
  #  policy: pull-push
  #  unprotect: false
  #  untracked: false
  #  when: on_success
  #  paths:
  #    - "ug4/build"
  #    - "ug4/apps/unit_tests/build"
  #    - "ughub"
        
# DEPLOY upload changes to repo and upload packages?
deploy-job:      # TODO
  variables:
    GIT_STRATEGY: none # Do not clone repo again for this job.
  stage: deploy
  environment: production
  script:
    - echo "Get release artifact and deploy it"